#include <Servo.h>
#include <DIYables_IRcontroller.h>  // DIYables_IRcontroller library

const int IR_RECEIVER = 7;
DIYables_IRcontroller_17 irController(IR_RECEIVER, 200);  // debounce time is 200ms

const int A1A = 2;  //define pin 2 for A1A
const int A1B = 3;  //define pin 3 for A1B

const int B1A = 4;  //define pin 8 for B1A
const int B1B = 9;  //define pin 9 for B1B

const int PIN_BAZA = 10;
const int PIN_CUPLA1 = 11;
const int PIN_CUPLA2 = 5;
//const int PIN_CUPLA3
const int PIN_PREHENSOR = 6;

const int PIN_LED = 8;

Servo servo_baza;
Servo servo_cupla1;
Servo servo_cupla2;
// //Servo servo_cupla3;
Servo servo_prehensor;

enum motoare {
  DIRECTIE,
  BAZA,
  CUPLA1,
  CUPLA2,
  CUPLA3,
  PREHENSOR,
  NONE
};

int pozitie_baza = 0;
int pozitie_cupla1 = 0;
int pozitie_cupla2 = 0;
int pozitie_cupla3 = 0;
int pozitie_prehensor = 0;

motoare motorCurent = NONE;


void setup() {
  motorA('O');  // Turn motor A OFF
  motorB('O');  // Turn motor B OFF
  // put your setup code here, to run once:
  pinMode(IR_RECEIVER, INPUT);
  pinMode(B1A, OUTPUT);  // define pin as output
  pinMode(B1B, OUTPUT);

  pinMode(A1A, OUTPUT);
  pinMode(A1B, OUTPUT);


  pinMode(PIN_LED, OUTPUT);
  digitalWrite(PIN_LED, LOW);

  Serial.begin(9600);
  irController.begin();

  // pinMode(PIN_BAZA, LOW);
  // pinMode(PIN_CUPLA1, LOW);
  // pinMode(PIN_CUPLA2, LOW);
  // pinMode(PIN_PREHENSOR, LOW);

  uint8_t status = servo_baza.attach(PIN_BAZA);
  if (status > 0) {
    Serial.println("Servo baza attached on channel" + status);
  } else if (status == 0) {
    Serial.println("Servo baza was NOT attached. Status = " + status);
    digitalWrite(PIN_LED, HIGH);
  }
  servo_baza.write(pozitie_baza);


  servo_cupla1.attach(PIN_CUPLA1);
  servo_cupla1.write(pozitie_cupla1);

  servo_cupla2.attach(PIN_CUPLA2);
  servo_cupla2.write(pozitie_cupla2);

  // // servo_cupla3.attach(PIN_CUPLA3);
  // // servo_cupla3.write(pozitie_cupla3);

  servo_prehensor.attach(PIN_PREHENSOR);
  servo_prehensor.write(pozitie_prehensor);
}

void loop() {
  // put your main code here, to run repeatedly:
  Key17 key = irController.getKey();
  if (key != Key17::NONE) {
    switch (key) {
      case Key17::KEY_1:
        Serial.println("1");
        motorCurent = DIRECTIE;
        break;

      case Key17::KEY_2:
        Serial.println("2");
        motorCurent = BAZA;
        break;

      case Key17::KEY_3:
        Serial.println("3");
        motorCurent = CUPLA1;
        break;

      case Key17::KEY_4:
        Serial.println("4");
        motorCurent = CUPLA2;
        break;

      case Key17::KEY_5:
        Serial.println("5");
        motorCurent = CUPLA3;
        break;

      case Key17::KEY_6:
        Serial.println("6");
        motorCurent = PREHENSOR;
        break;

      case Key17::KEY_UP:
        {
          Serial.println("UP");
          switch (motorCurent) {
            case DIRECTIE:
              {
                motorA('R');
                motorB('L');
                delay(400);
                motorA('O');  // Turn motor A OFF
                motorB('O');  // Turn motor B OFF
                break;
              }
            case CUPLA1:
              {
                pozitie_cupla1 += 15;
                servo_cupla1.write(pozitie_cupla1);
                break;
              }
            case CUPLA2:
              {
                pozitie_cupla2 += 15;
                servo_cupla2.write(pozitie_cupla2);
                break;
              }
          }

          break;
        }

      case Key17::KEY_DOWN:
        {
          Serial.println("DOWN");
          switch (motorCurent) {
            case DIRECTIE:
              {
                motorA('L');
                motorB('R');
                delay(400);
                motorA('O');  // Turn motor A OFF
                motorB('O');  // Turn motor B OFF
                break;
              }
            case CUPLA1:
              {
                pozitie_cupla1 -= 15;
                servo_cupla1.write(pozitie_cupla1);
                break;
              }
            case CUPLA2:
              {
                pozitie_cupla2 -= 15;
                servo_cupla2.write(pozitie_cupla2);
                break;
              }
          }
          break;
        }

      case Key17::KEY_LEFT:
        {
          Serial.println("LEFT");
          switch (motorCurent) {
            case DIRECTIE:
              {
                motorA('L');
                motorB('L');
                delay(400);
                motorA('O');  // Turn motor A OFF
                motorB('O');  // Turn motor B OFF
                break;
              }
            case BAZA:
              {
                pozitie_baza -= 10;
                servo_baza.write(pozitie_baza);
                break;
              }
            case PREHENSOR:
              {
                pozitie_prehensor -= 10;
                servo_prehensor.write(pozitie_prehensor);
                break;
              }
          }
          break;
        }

      case Key17::KEY_RIGHT:
        {
          Serial.println("RIGHT");
          switch (motorCurent) {
            case DIRECTIE:
              {
                motorA('R');
                motorB('R');
                delay(400);
                motorA('O');  // Turn motor A OFF
                motorB('O');  // Turn motor B OFF
                break;
              }
            case BAZA:
              {
                pozitie_baza += 10;
                servo_baza.write(pozitie_baza);
                delay(400);
                break;
              }
            case PREHENSOR:
              {
                pozitie_prehensor += 10;
                servo_prehensor.write(pozitie_prehensor);
                delay(400);
                break;
              }
          }
          break;
        }

      default:
        Serial.println("WARNING: undefined key:");
        break;
    }
  }
}

/*
 * @motorA
 * activation rotation of motor A
 * d is the direction
 * R = Right
 * L = Left
 */
void motorA(char d) {
  if (d == 'R') {
    Serial.println("Motor A - right");
    digitalWrite(A1A, LOW);
    digitalWrite(A1B, HIGH);
  } else if (d == 'L') {
    Serial.println("Motor A - left");
    digitalWrite(A1A, HIGH);
    digitalWrite(A1B, LOW);
  } else {
    //Robojax.com L9110 Motor Tutorial
    // Turn motor OFF
    Serial.println("Motor A - off");
    digitalWrite(A1A, LOW);
    digitalWrite(A1B, LOW);
  }
}  // motorA end


/*
 * @motorB
 * activation rotation of motor B
 * d is the direction
 * R = Right
 * L = Left
 */
void motorB(char d) {

  if (d == 'R') {
    digitalWrite(B1A, LOW);
    digitalWrite(B1B, HIGH);
    Serial.println("Motor B - right");
  } else if (d == 'L') {
    digitalWrite(B1A, HIGH);
    digitalWrite(B1B, LOW);
    Serial.println("Motor B - left");
  } else {
    //Robojax.com L9110 Motor Tutorial
    // Turn motor OFF
    digitalWrite(B1A, LOW);
    digitalWrite(B1B, LOW);
    Serial.println("Motor B - off");
  }

}  // motorB end
